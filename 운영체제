[운영체제의 역할과 구조]
운영체제 : 사용자가 컴퓨터를 쉽게 다루게 해주는 인터페이스 (유저와 하드웨어의 매개체 역할)
        -> 한정된 메모리 / 시스템 자원을 효율적으로 분배
        -> 컴퓨터 시스템의 자원 제어 (자원 : 물리적 부품(cpu, 그래픽 카드 등)과 가상 구성요소(파일, 네트워크 소켓, 메모리 등))
        -> 컴퓨터 시스템이 안정적, 효율적인 동작이 되도록 도와줌
*인터페이스 : 컴퓨터 시스템과 사용자를 연결해줌
*펌웨어 : 주변 장치/직접적으로 하드웨어 제어해서 동작 만듦 (소프트웨어 추가 설치 x)
        직접적인 하드웨어의 제어가 있다는 것.
        ex) 스마트폰 게임 만듦 -> 펌웨어 x
            오락실에서 망치로 뚜두려 잡는 두더지 게임 프로그램 -> 펌웨어 o

운영체제의 구조 : 프로세스 관리자, 메모리 관리자, 파일 관리자, 장치 관리자
-프로세스 관리자 : 프로세스 생성과 삭제, cpu 할당 위한 스케줄 결정
-메모리 관리자 : 메모리 할당/회수
-파일 관리자 : 파일 접근 제한 관리, 저장 장치 공간 관리, 컴퓨터 시스템의 모든 파일 관리
-장치 관리자 : 컴퓨터 시스템의 모든 장치 관리, 시스템 장치의 할당/작동/반환 (하드디스크, ssd, 마우스, 프린터 등)

운영체제의 역할
1. cpu 스케줄링, 프로세스 관리
  cpu 소유권을 어떤 프로세스에 할당할지, 자원 할당 / 반환 관리
2. 메모리 관리 
  한정된 메모리를 어떤 프로세스에 얼만큼 할당할지
3. 디스크 파일 관리
  디스크 파일을 어떠한 방법으로 보관할지 관리
  *디스크 : CD, USB, 하드디스크
4. I/O 디바이스 관리 : 마우스, 키보드와 컴퓨터 간 데이터 주고받는 것 관리

운영체제의 종류
-windows
  선점형 멀티태스킹 방식 제공 : 동시에 여러 개 프로그램 실행하면서 운영체제가 각 작업의 cpu 이용 시간 제어
  GUI 제공 : 키보드 없이 마우스로 아이콘이나 메뉴 선택하여 작업 수행하는 그래픽 기반의 인터페이스 방식
  자동감지 기능 제공 : 하드웨어 설치 시 필요한 시스템 환경을 운영체제가 자동으로 구성해주는 자동감지 기능 제공
  OLE(Object Linking and Embedding) 사용 : 개체를 현재 작성 중인 문서에 자유롭게 연결/삽입하여 편집할 수 있게 해주는 기능 제공
-Unix
  90% 이상 c언어로 구현되어 있음
  범용 다중 사용자 방식의 시분할 운영체제
  멀티 태스킹 가능
  대화식 운영체제 기능 제공 : (프롬프트 사용) 사용자 명령 기반의 대화식 운영체제 기능
  다중 작업 기능 제공 : 다수의 작업이 cpu와 같은 공용 자원 나누어 사용하여 한 번에 하나 이상의 작업 수행하는 기능 제공
  다중 사용자 기능 제공 : 여러 대의 단말(키보드, 모니터)이 하나의 컴퓨터에 연결, 여러 사람이 동시에 시스템 사용하여 각각 작업 수행 가능 기능 제공
  이식성 제공 : 다른 하드웨어 기종으로 쉽게 이식 가능(c언어 구현, 시스템 프로그램 모듈화 되어 있기 때문)
  계층적 트리 구조 파일 시스템 제공 : 유닉스는 계층적 트리 구조를 가짐으로써 통합적인 파일 관리 용이
 *일괄처리 운영체제 : 작업 모아서 순서대로 처리
  시분할 : 각 사용자의 프로그램을 한 번에 조금씩 수행
  실시간 : 원하는 시간 내 프로그램 결과를 얻을 수 있음
  분산 : 분산 시스템 관리 위함 (분산 : 2개 이상 컴퓨터 시스템이 네트워크로 서로 연결되어 서로의 자원 이용하는 시스템)
-Linux
  유닉스 기반 개발, 오픈 소스 기반 운영체제
  데비안, 레드헷, Fedora, Ubuntu, CentOS
  유닉스 계열이므로 대화식 운영체제, 다중 작업 기능, 다중 사용자 기능, 이식성, 계층적 트리 구조 파일 시스템 가짐
-Mac
  애플 -> 유닉스 기반 개발
-안드로이드
  휴대용 장치 + 미들웨어, 사용자 인터페이스 + 표준 응용 프로그램 포함 운영체제
  미들웨어 : 운영 체제와 해당 운영 체제에서 실행되는 애플리케이션 사이에 존재하는 소프트웨어, 분산 애플리케이션의 통신 및 데이터 관리를 가능
  표준 응용 프로그램 : 웹 브라우저, 이메일 클라이언트 등
  리눅스 기반 (리눅스 커널 위에서 동작)
  자바, 코틀린 언어 사용해 응용 프로그램 작성 (생산성 높음, 전문 지식 없어도 개발 가능)
  런타임 라이브러리 : 컴파일된 바이트 코드 구동 가능
  SDK(안드로이드 소프트웨어 개발 키트) : 응용 프로그램 개발 시 필요한 도구, API 제공

GUI : 그래픽 위주로 컴퓨터 제어
CUI : 명령어로 컴퓨터에 명령 내림

시스템콜
응용 프로그램이 하드웨어에 대한 제어 필요한 경우 이용
운영체제에 서비스 요청하는 메커니즘
운영체제가 커널에 접근하기 위한 인터페이스
유저 프로그램이 운영체제의 서비스 받기 위해 커널 함수 호출할 때 사용


운영체제의 구조
유저 프로그램 - (gui - 시스템호출 - 커널 - 드라이버) - 하드웨어
